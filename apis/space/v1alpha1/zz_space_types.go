/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SpaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SpaceParameters struct {

	// +kubebuilder:validation:Optional
	AllowSSH *bool `json:"allowSsh,omitempty" tf:"allow_ssh,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	Asgs []*string `json:"asgs,omitempty" tf:"asgs,omitempty"`

	// +kubebuilder:validation:Optional
	Auditors []*string `json:"auditors,omitempty" tf:"auditors,omitempty"`

	// +kubebuilder:validation:Optional
	Developers []*string `json:"developers,omitempty" tf:"developers,omitempty"`

	// +kubebuilder:validation:Optional
	IsolationSegment *string `json:"isolationSegment,omitempty" tf:"isolation_segment,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	Managers []*string `json:"managers,omitempty" tf:"managers,omitempty"`

	// +kubebuilder:validation:Required
	Org *string `json:"org" tf:"org,omitempty"`

	// +kubebuilder:validation:Optional
	Quota *string `json:"quota,omitempty" tf:"quota,omitempty"`

	// +kubebuilder:validation:Optional
	StagingAsgs []*string `json:"stagingAsgs,omitempty" tf:"staging_asgs,omitempty"`
}

// SpaceSpec defines the desired state of Space
type SpaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SpaceParameters `json:"forProvider"`
}

// SpaceStatus defines the observed state of Space.
type SpaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SpaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Space is the Schema for the Spaces API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,template}
type Space struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SpaceSpec   `json:"spec"`
	Status            SpaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpaceList contains a list of Spaces
type SpaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Space `json:"items"`
}

// Repository type metadata.
var (
	Space_Kind             = "Space"
	Space_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Space_Kind}.String()
	Space_KindAPIVersion   = Space_Kind + "." + CRDGroupVersion.String()
	Space_GroupVersionKind = CRDGroupVersion.WithKind(Space_Kind)
)

func init() {
	SchemeBuilder.Register(&Space{}, &SpaceList{})
}
